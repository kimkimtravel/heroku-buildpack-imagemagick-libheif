#!/bin/bash
set -e

BUILD_DIR=$1
CACHE_DIR=$2

#####################################
# Versions (bump these to force rebuild)
#####################################
LIBHEIF_VERSION="1.20.2"
IM_VERSION="7.1.1-46"

#####################################
# Cache locations
#####################################
LIBHEIF_CACHE="$CACHE_DIR/libheif-$LIBHEIF_VERSION.tar.gz"
IM_CACHE="$CACHE_DIR/imagemagick-$IM_VERSION.tar.gz"

#####################################
# Install dirs
#####################################
LIBHEIF_DIR="$BUILD_DIR/.heroku/vendor/libheif"
IM_DIR="$BUILD_DIR/.heroku/vendor/imagemagick"

#####################################
# Function to restore from cache
#####################################
restore_cache() {
  local cache_file=$1
  local install_dir=$2
  if [ -f "$cache_file" ]; then
    echo "📦 Restoring from cache: $cache_file"
    mkdir -p "$(dirname "$install_dir")"
    tar --extract --gzip --file="$cache_file" --preserve-permissions -C "$(dirname "$install_dir")"
    return 0
  fi
  return 1
}

#####################################
# Function to save to cache
#####################################
save_cache() {
  local cache_file=$1
  local install_dir=$2
  echo "💾 Saving to cache: $cache_file"
  tar --create --gzip --file="$cache_file" --preserve-permissions -C "$(dirname "$install_dir")" "$(basename "$install_dir")"
}

#####################################
# Build libheif
#####################################
if ! restore_cache "$LIBHEIF_CACHE" "$LIBHEIF_DIR"; then
  echo "⚙️ Building libheif $LIBHEIF_VERSION"

  export LD_LIBRARY_PATH="$BUILD_DIR/.apt/lib:$LD_LIBRARY_PATH"
  export PKG_CONFIG_PATH="$BUILD_DIR/.apt/lib/pkgconfig:$PKG_CONFIG_PATH"
  export CFLAGS="-I$BUILD_DIR/.apt/include"
  export LDFLAGS="-L$BUILD_DIR/.apt/lib"

  BUILD_TMP="/tmp/libheif-build"
  rm -rf "$BUILD_TMP" "$LIBHEIF_DIR"
  mkdir -p "$BUILD_TMP" "$LIBHEIF_DIR"
  cd "$BUILD_TMP"

  curl -LO "https://github.com/kimkimtravel/heroku-buildpack-imagemagick-libheif/raw/main/libheif/libheif-$LIBHEIF_VERSION.tar.gz"
  tar xzf "libheif-$LIBHEIF_VERSION.tar.gz"
  cd "libheif-$LIBHEIF_VERSION"
  mkdir build && cd build

  cmake -DCMAKE_INSTALL_PREFIX="$LIBHEIF_DIR" -DBUILD_SHARED_LIBS=ON -DBUILD_HEIF_EXAMPLES=OFF ..
  make -j4
  make install

  save_cache "$LIBHEIF_CACHE" "$LIBHEIF_DIR"
fi

#####################################
# Build ImageMagick with libheif
#####################################
if ! restore_cache "$IM_CACHE" "$IM_DIR"; then
  echo "⚙️ Building ImageMagick $IM_VERSION"

  BUILD_TMP="/tmp/im-build"
  rm -rf "$BUILD_TMP" "$IM_DIR"
  mkdir -p "$BUILD_TMP" "$IM_DIR"
  cd "$BUILD_TMP"

  curl -LO "https://imagemagick.org/download/releases/ImageMagick-$IM_VERSION.tar.xz"
  tar xf "ImageMagick-$IM_VERSION.tar.xz"
  cd "ImageMagick-$IM_VERSION"

  PKG_CONFIG_PATH="$LIBHEIF_DIR/lib/pkgconfig:$PKG_CONFIG_PATH" \
  LD_LIBRARY_PATH="$LIBHEIF_DIR/lib:$LD_LIBRARY_PATH" \
  ./configure \
    --prefix="$IM_DIR" \
    --with-heic \
    --with-webp \
    --with-jpeg \
    --with-png \
    --disable-static

  make -j4
  make install

  mkdir -p "$IM_DIR/etc/ImageMagick-7"
  cp -r ./config/* "$IM_DIR/etc/ImageMagick-7/"

  save_cache "$IM_CACHE" "$IM_DIR"
fi

#####################################
# Add runtime environment config via profile.d
#####################################
mkdir -p "$BUILD_DIR/.profile.d"
cat > "$BUILD_DIR/.profile.d/imagemagick_env.sh" <<'EOF'
export PATH="$HOME/.heroku/vendor/imagemagick/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/.heroku/vendor/libheif/lib:$HOME/.heroku/vendor/imagemagick/lib:$LD_LIBRARY_PATH"
EOF

echo "✅ Installed runtime environment script for Heroku:"
ls -l "$BUILD_DIR/.profile.d/"
cat "$BUILD_DIR/.profile.d/imagemagick_env.sh"

#####################################
# Done - verify binaries with LD_LIBRARY_PATH
#####################################
# Use LD_LIBRARY_PATH explicitly for runtime checks
if LD_LIBRARY_PATH="$LIBHEIF_DIR/lib:$IM_DIR/lib:$LD_LIBRARY_PATH" "$IM_DIR/bin/convert" -version; then
  echo "✅ ImageMagick is installed"
else
  echo "❌ Build failed: ImageMagick is broken" >&2
  exit 1
fi

if LD_LIBRARY_PATH="$LIBHEIF_DIR/lib:$LD_LIBRARY_PATH" "$LIBHEIF_DIR/bin/heif-info" --version; then
  echo "✅ libheif is installed"
else
  echo "❌ libheif build failed" >&2
  exit 1
fi
